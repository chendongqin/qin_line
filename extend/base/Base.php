<?php
/**
 * Created by PhpStorm.
 * User: Viter
 * Date: 2018/3/4
 * Time: 19:38
 */
namespace base;
use think\Controller;
use think\Session;
use ku\Tool;
class Base extends Controller{

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**返回json数据
     * @param string $msg
     * @param bool $status
     * @param int $code
     * @param array $data
     * @return \think\response\Json
     */
    protected function returnJson($msg='',$code=0,$status = false,$data=array()){
        $jsonData = array('status'=>$status,'msg'=>$msg,'code'=>$code,'data'=>$data);
        return json($jsonData);
    }

    /**自动匹配请求方法获取参数
     * @param string $name
     * @param string $default
     * @param string $filter
     * @return mixed
     */
    protected function getParam($name = '', $default = '', $filter = 'string'){
       $request = $this->request;
       $param = $request->param($name , $default, $filter);
       return $param;
    }

    /**获取参数魔术方法
     * @param $name
     * @param $arguments
     * @return mixed
     */
    public function __call($name, $arguments){
        $request = $this->request;
        $paramName = $arguments[0];
        $default = $arguments[1];
        $filter = $arguments[2];
        $param = $request->$name($paramName,$default,$filter);
        return $param;
    }

    /**生成加密密码
     * @param $password
     * @return string
     */
    protected function createPwd($password){
        $sha1Code = Tool::randCode(4,false);
        $pwd = sha1($password.$sha1Code);
        return $pwd.':'.$sha1Code;
    }

    /**密码校验
     * @param $password,加密密码
     * @param $virefy，明文密码
     * @return bool
     */
    protected function virefyPwd($password,$virefy){
        $codes = explode(':',$password);
        $secretPassword = $codes[0];
        $sha1Code = isset($codes[1])?$codes[1]:'';
        $sha1Password = sha1($virefy.$sha1Code);
        if($secretPassword != $sha1Password){
            return false;
        }
        return true;
    }

    /**参数校验
     * @param array $rules
     * @param array $data
     * @return array|string
     */
    protected function virefyParams(array $rules,array $data ){
        $returnData =[];
        foreach ($rules as $key=>$value){
            if(!isset($data[$key])){
                return (string)$value;
            }
            $returnData[$key] = $data[$key];
        }
        return $returnData;
    }


}